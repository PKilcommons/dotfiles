{
    "editor.renderWhitespace": "boundary",
    "editor.suggestSelection": "first",
    "git.ignoreMissingGitWarning": true,
    "git.autofetch": true,
    "workbench.startupEditor": "welcomePageInEmptyWorkbench",
    "remote.SSH.remotePlatform": {
        "Babylon": "linux",
        "192.168.1.126": "linux"
    },
    "terminal.integrated.commandsToSkipShell": [
        "-workbench.action.terminal.paste"
    ],
    "remote.SSH.configFile": "C:\\Users\\Patrick\\.ssh\\config",
    "files.trimTrailingWhitespace": true,
    "debug.onTaskErrors": "showErrors",
    "hexeditor.columnWidth": 16,
    "hexeditor.showDecodedText": true,
    "hexeditor.defaultEndianness": "little",
    "hexeditor.inspectorType": "aside",
    "svg.preview.mode": "svg",
    "files.trimFinalNewlines": true,
    "files.insertFinalNewline": true,
    "terminal.integrated.env.linux": {
        "PROJECT_WORKSPACE": "${workspaceFolder}",
        "PYTHONPATH": "${workspaceFolder}",
    },
    "terminal.integrated.profiles.linux": {
        "tmux": {
            "path": "bash",
            "args": [
                "-c",
                "tmux new -ADs vscode-${PWD##*/} \\; setenv PROJECT_WORKSPACE ${workspaceFolder}"
            ],
            "icon": "vm",
            "color": "terminal.ansiCyan"
        }
    },
    "terminal.integrated.defaultProfile.linux": "tmux",
    "terminal.integrated.fontFamily": "Consolas Nerd Font Mono",


    "window.titleBarStyle": "custom",
    "window.enableMenuBarMnemonics": false,
    "window.customMenuBarAltFocus": false, // Alt no longer toggles to the menubar, but it's still usable on hold
    "debug.allowBreakpointsEverywhere": true,

    "Prettier-SQL.commaPosition": "before",
    "Prettier-SQL.SQLFlavourOverride": "postgresql",
    "Prettier-SQL.tabSizeOverride": 4,
    "Prettier-SQL.tabulateAlias": true,
    "Prettier-SQL.keywordCase": "upper",

    // todo-tree
    "todo-tree.tree.flat": true,
    "todo-tree.tree.showCountsInTree": true,
    "todo-tree.tree.buttons.export": true,
    "todo-tree.tree.buttons.groupByTag": false,
    "todo-tree.highlights.defaultHighlight": {
        "foreground": "#F92472",
        "opacity": 0,
        "type": "tag-and-comment"
    },
    "todo-tree.general.tags": [
        "BUG",
        "HACK",
        "FIXME",
        "TODO",
        "XXX",
        "[ ]",
        "[x]",
        "NOTE",
        "SAFETY"
    ],

    // Python
    "python.languageServer": "Pylance",
    "python.analysis.autoFormatStrings": true,
    "python.analysis.autoImportCompletions": true,
    "python.analysis.diagnosticMode": "workspace",

    "python.analysis.exclude": [
        // When looking at stdlib source VSCode will follow the symlink into the system Python directory which isn't in
        // Pyrights' ignore list
        "/usr/lib/python*/*.py",
        "/usr/lib/python*/*.pyi",
        "/home/gilgamesh/.vscode-server/**/*.py",
        "/home/gilgamesh/.vscode-server/**/*.pyi",
    ],
    "[python]": {
        "editor.defaultFormatter": "charliermarsh.ruff",
        "editor.semanticHighlighting.enabled": true,
        "editor.formatOnSave": true,
        "editor.codeActionsOnSave": {
            "source.organizeImports": "explicit"
        },
    },

    // dbt
    "[jinja-sql]": {
        "editor.defaultFormatter": "innoverio.vscode-dbt-power-user",
        "editor.formatOnSave": true
    },

    // Go
    "[go]": {
        "editor.formatOnSave": true
    },
    "go.formatTool": "gofmt",
    "gopls": {
        "ui.semanticTokens": true
    },

    // Rust
    "[rust]": {
        "editor.defaultFormatter": "rust-lang.rust-analyzer",
        "editor.formatOnSave": true,
    },
    "rust-analyzer.check.command": "clippy",
    "rust-analyzer.cargo.features": "all",
    // `true` by default, but in case this changes we want to be consistent with our `clippy` alias
    "rust-analyzer.check.allTargets": true,
    "rust-analyzer.rustfmt.extraArgs": [
        "+nightly",
    ],
    "rust-analyzer.typing.autoClosingAngleBrackets.enable": true,
    "rust-analyzer.semanticHighlighting.operator.specialization.enable": true,
    "rust-analyzer.semanticHighlighting.punctuation.separate.macro.bang": true,
    "rust-analyzer.hover.actions.references.enable": true,
    "rust-analyzer.showRequestFailedErrorNotification": false,

    // Inlay type hints
    "editor.inlayHints.enabled": "offUnlessPressed",
    "editor.inlayHints.fontFamily": "Consolas",
    "editor.inlayHints.fontSize": 11,
    // Python-specific
    "python.analysis.inlayHints.functionReturnTypes": true,
    "python.analysis.inlayHints.variableTypes": true,
    "python.analysis.inlayHints.pytestParameters": true,
    // "python.analysis.inlayHints.callArgumentNames": true,
    // Rust-specific
    "rust-analyzer.inlayHints.closureReturnTypeHints.enable": "always",
    "rust-analyzer.inlayHints.lifetimeElisionHints.enable": "always",
    "rust-analyzer.inlayHints.lifetimeElisionHints.useParameterNames": true,
    // Go-specific
    "go.inlayHints.assignVariableTypes": true,

    // Theme and syntax highlighting
    "workbench.colorTheme": "Monokai",
    "workbench.colorCustomizations": {
        // Name of the theme you are currently using
        "[Monokai]": {
            // Overrides for specific kinds of inlay hints
            "editorInlayHint.foreground": "#b3afaff0",
            "editorInlayHint.background": "#00000000",
            "editorInlayHint.typeBackground": "#00000000",
        }
    },
    "editor.tokenColorCustomizations": {
        "[Monokai]": {
            "textMateRules": [
                {
                    // Make comments slightly brighter than Monokai's native comment colour to make them easier to read
                    "scope": "comment",
                    "settings": {
                        "foreground": "#8d8282"
                    }
                },
                // Makes doc comments and Python docstring make string literal colour
                {
                    "scope": [
                        "string.quoted.docstring.multi.python",
                        "comment.block.documentation",
                        "comment.line.documentation",
                    ],
                    "settings": {
                        "foreground": "#E6DB74"
                    },
                },
                {
                    "scope": "keyword.other",
                    "settings": {
                        "foreground": "#66D9EF" //"#F92672"
                    },
                },
                {
                    "scope": "constant.other.caps.python",
                    "settings": {
                        "foreground": "#AE81FF"
                    }
                },
                // Rust-specific
                {
                    "scope": [
                        "keyword.other.fn.rust",
                        "storage.modifier.visibility.rust"
                    ],
                    "settings": {
                        "fontStyle": "italic"
                    },
                },
            ]
        }
    },

    // LSP semantic highlighting
    // https://code.visualstudio.com/api/language-extensions/semantic-highlight-guide#standard-token-types-and-modifiers
    "editor.semanticTokenColorCustomizations": {
        "[Monokai]": {
            "rules": {
                "variable.static": "#AE81FF",
                "*.readonly": "#AE81FF",
                "variable.readonly.defaultLibrary": "#AE81FF",
                "readonly": "#AE81FF",
                "enumMember": {
                    "foreground": "#AE81FF",
                    "underline": true,
                },
                "builtinType": {
                    "foreground": "#A6E22E",
                    "underline": true,
                    "italic": false,
                },
                "typeAlias": {
                    "foreground": "#A6E22E",
                    "underline": true,
                    "italic": false,
                },
                "*.defaultLibrary": "#A6E22E",
                "interface": {
                    "underline": false,
                    "italic": true,
                },
                "method": {
                    "foreground": "#A6E22E",
                    "underline": false,
                    "italic": false,
                },
                "selfKeyword": {
                    "foreground": "#FD971F",
                },
                "selfTypeKeyword": {
                    "foreground": "#A6E22E",
                    "underline": true,
                },
                "parameter": {
                    "foreground": "#FD971F",
                    "italic": false,
                },
                "namespace": {
                    "italic": true,
                },
                "formatSpecifier": "#AE81FF",
                // Rust specific https://rust-analyzer.github.io/manual.html#semantic-syntax-highlighting
                // `rust-analyzer` uses a default that is the same colour default as a normal comment. This makes
                // sure that is overwritten so that we use the TextMate pattern
                "*.documentation": "#E6DB74",
                "variable.consuming": {
                    "strikethrough": true
                },
                "variable.reference": {
                    "italic": true,
                },
                "parameter.reference": {
                    "italic": true,
                },
                "selfKeyword.reference": {
                    "italic": true,
                },
                // Since `crate` is technically a keyword this keeps its style inline with modules
                "keyword.crateRoot": {
                    "foreground": "#A6E22E",
                    "underline": true,
                    "italic": true,
                },
                "keyword.async": {
                    "italic": true,
                },
            }
        },
    },
    "BracketHighlighter.blurOpacity": "0.985",
    "BracketHighlighter.highlightScopeFromText": true,
    "BracketHighlighter.textColor": "",
    "BracketHighlighter.timeOutValue": 150,
    "BracketHighlighter.textColorSymbol": "",
    "BracketHighlighter.differentSymbolHighlightingUsed": true,
    "BracketHighlighter.outlineSymbol": "1px solid rgb(255, 170, 33)",
    "editor.rulers": [
        {
            "column": 120,
            "color": "#6969694d"
        }
    ],
    "files.exclude": {
        ".pytest_cache": true,
        ".ruff_cache": true,
        "**/__pycache__": true,
        "**/.jj": true,
        "**/.pdm-build": true
    },
    "files.watcherExclude": {
        "**/.git/objects/**": true,
        "**/.git/subtree-cache/**": true,
        ".venv/**": true,
        ".pytest_cache": true,
        ".ruff_cache": true,
        "**/__pycache__": true,
        "**/.pdm-build": true
    },

    "errorLens.enableOnDiffView": true,
    "errorLens.gutterIconsEnabled": true,
    "errorLens.statusBarIconsEnabled": true,
    "errorLens.statusBarColorsEnabled": true,
    "errorLens.enabledDiagnosticLevels": [
        "error",
        "warning",
        "info",
        "hint"
    ],
    "gitlens.defaultGravatarsStyle": "retro",
    "gitlens.showWelcomeOnInstall": false,
    "gitlens.plusFeatures.enabled": false,
    "errorLens.enabledInMergeConflict": false,

    "containers.volumes.sortBy": "CreatedTime",
    "hadolint.hadolintPath": "/home/gilgamesh/.local/bin/hadolint",
    "github.branchProtection": true,
    "gitlens.views.commits.files.icon": "status",
    "gitlens.mode.statusBar.enabled": false,
    "gitlens.hovers.currentLine.over": "line",
    "gitlens.currentLine.uncommittedChangesFormat": "${working} ${ago}",
    "evenBetterToml.semanticTokens": true,
    "go.toolsManagement.autoUpdate": true,
    "githubPullRequests.fileListLayout": "tree",
    "githubPullRequests.pullBranch": "never",
    "githubPullRequests.useReviewMode": {
        "merged": false,
        "closed": false
    },
    "githubPullRequests.defaultMergeMethod": "squash",
    "githubPullRequests.defaultCreateOption": "createDraft",
    "githubPullRequests.showPullRequestNumberInTree": true,
    "window.commandCenter": false,
    "inlineSQL.dbPort": 5437,
    "inlineSQL.dbPassword": "secret",
    "evenBetterToml.formatter.columnWidth": 120,
    "evenBetterToml.formatter.arrayTrailingComma": true,
    "evenBetterToml.formatter.arrayAutoCollapse": true,
    "editor.minimap.autohide": true,
    "githubPullRequests.terminalLinksHandler": "github",
    "githubPullRequests.commentExpandState": "collapseAll",
    "diffEditor.maxComputationTime": 0,
    "diffEditor.ignoreTrimWhitespace": false,
    "diffEditor.experimental.showMoves": true,
    "editor.formatOnSave": false,
    "explorer.autoReveal": false,
    "[sql]": {
        "editor.defaultFormatter": "inferrinizzard.prettier-sql-vscode"
    },
    "rainbow_csv.enable_context_menu_head": true,
    "rainbow_csv.enable_context_menu_tail": true,
    "redhat.telemetry.enabled": false,
    "githubPullRequests.createOnPublishBranch": "never",
    "githd.blameView.enabled": false,
    "gitlens.codeLens.enabled": false,
    "gitlens.hovers.avatars": false,
    "clipboard-manager.snippet.enabled": false,
    "workbench.editor.labelFormat": "short",
    "chat.commandCenter.enabled": false,
    "gitlens.views.scm.grouped.views": {
        "commits": true,
        "branches": true,
        "remotes": true,
        "stashes": true,
        "tags": true,
        "worktrees": true,
        "contributors": true,
        "repositories": false,
        "searchAndCompare": true,
        "launchpad": false
    },
    "files.associations": {
        "*.just": "just"
    },
    "workbench.iconTheme": "material-icon-theme",
    "material-icon-theme.folders.color": "#26a69a",
    "material-icon-theme.activeIconPack": "none",
    "jjk.enableAnnotations": false,
}
